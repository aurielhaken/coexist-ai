import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import OpenAI from 'openai';

// Sch√©ma de validation pour la requ√™te
const RequestSchema = z.object({
  message: z.string().min(1, "Le message ne peut pas √™tre vide"),
  useDemo: z.boolean().optional().default(true)
});

// R√®gles de coexistence COEXIST.AI
const COEXIST_RULES = `
Tu es COEXIST.AI, un assistant sp√©cialis√© dans la r√©solution de conflits et la promotion de la coexistence pacifique.

R√àGLES FONDAMENTALES DE COEXISTENCE :

1. **√âCOUTE ACTIVE** : Toujours chercher √† comprendre tous les points de vue avant de juger
2. **EMPATHIE** : Reconna√Ætre les √©motions et besoins de chaque partie
3. **RESPECT MUTUEL** : Traiter chaque personne avec dignit√©, ind√©pendamment des d√©saccords
4. **COMMUNICATION NON-VIOLENTE** : Utiliser un langage constructif et √©viter les accusations
5. **RECHERCHE DE SOLUTIONS** : Se concentrer sur des solutions gagnant-gagnant
6. **PATIENCE** : Comprendre que la r√©solution de conflits prend du temps
7. **M√âDIATION** : Agir comme un pont entre les parties en conflit
8. **TOL√âRANCE** : Accepter les diff√©rences culturelles, religieuses et id√©ologiques
9. **JUSTICE** : Promouvoir l'√©quit√© et la fairness dans toutes les situations
10. **PAIX** : Toujours privil√©gier les solutions pacifiques aux confrontations

APPROCHE M√âTHODOLOGIQUE :
- Analyser le contexte et les enjeux
- Identifier les besoins sous-jacents de chaque partie
- Proposer des strat√©gies de communication
- Sugg√©rer des compromis constructifs
- Encourager le dialogue et la compr√©hension mutuelle

R√©ponds toujours en fran√ßais avec compassion, sagesse et pragmatisme.
`;

// Syst√®me d'analyse contextuelle avanc√©e
interface ConflictAnalysis {
  context: string;
  emotions: string[];
  stakeholders: string[];
  issues: string[];
  urgency: 'low' | 'medium' | 'high';
}

class SmartConflictAnalyzer {
  private analyzeContext(message: string): ConflictAnalysis {
    const lowerMessage = message.toLowerCase();
    
    // D√©tection du contexte
    let context = 'g√©n√©ral';
    if (this.containsAny(lowerMessage, ['famille', 'parent', 'enfant', 'fr√®re', 's≈ìur', 'm√®re', 'p√®re', 'maman', 'papa', 'grands-parents'])) {
      context = 'familial';
    } else if (this.containsAny(lowerMessage, ['travail', 'coll√®gue', 'patron', 'chef', 'bureau', '√©quipe', 'projet', 'r√©union', 'entreprise'])) {
      context = 'professionnel';
    } else if (this.containsAny(lowerMessage, ['couple', 'conjoint', 'mari', 'femme', 'copain', 'copine', 'amoureux', 'relation', 'mariage'])) {
      context = 'amoureux';
    } else if (this.containsAny(lowerMessage, ['ami', 'amiti√©', 'copain', 'copine', 'pote', 'groupe'])) {
      context = 'amical';
    } else if (this.containsAny(lowerMessage, ['voisin', 'quartier', 'immeuble', 'bruit', 'parking'])) {
      context = 'voisinage';
    }

    // D√©tection des √©motions
    const emotions: string[] = [];
    if (this.containsAny(lowerMessage, ['col√®re', '√©nerv√©', 'furieux', 'rage', 'irrit√©'])) emotions.push('col√®re');
    if (this.containsAny(lowerMessage, ['triste', 'd√©prim√©', 'bless√©', 'peine', 'mal'])) emotions.push('tristesse');
    if (this.containsAny(lowerMessage, ['peur', 'anxieux', 'inquiet', 'stress√©', 'angoiss√©'])) emotions.push('peur');
    if (this.containsAny(lowerMessage, ['frustr√©', 'bloqu√©', 'incompris', 'ignor√©'])) emotions.push('frustration');
    if (this.containsAny(lowerMessage, ['d√©√ßu', 'trahis', 'abandonn√©'])) emotions.push('d√©ception');

    // D√©tection des parties prenantes
    const stakeholders: string[] = [];
    if (this.containsAny(lowerMessage, ['je', 'moi', 'mon', 'ma', 'mes'])) stakeholders.push('vous');
    if (this.containsAny(lowerMessage, ['il', 'elle', 'lui', 'son', 'sa', 'ses'])) stakeholders.push('autre personne');
    if (this.containsAny(lowerMessage, ['nous', 'notre', 'nos'])) stakeholders.push('groupe');

    // D√©tection des probl√®mes
    const issues: string[] = [];
    if (this.containsAny(lowerMessage, ['communication', 'parler', '√©couter', 'comprendre'])) issues.push('communication');
    if (this.containsAny(lowerMessage, ['argent', 'finances', 'budget', 'd√©penses'])) issues.push('finances');
    if (this.containsAny(lowerMessage, ['temps', 'disponibilit√©', 'pr√©sence'])) issues.push('temps');
    if (this.containsAny(lowerMessage, ['respect', 'consid√©ration', 'reconnaissance'])) issues.push('respect');
    if (this.containsAny(lowerMessage, ['confiance', 'mensonge', 'tromperie', 'secret'])) issues.push('confiance');

    // √âvaluation de l'urgence
    let urgency: 'low' | 'medium' | 'high' = 'medium';
    if (this.containsAny(lowerMessage, ['urgent', 'crise', 'grave', 'terrible', 'catastrophe', 'imm√©diat'])) {
      urgency = 'high';
    } else if (this.containsAny(lowerMessage, ['l√©ger', 'petit', 'mineur', 'pas grave'])) {
      urgency = 'low';
    }

    return { context, emotions, stakeholders, issues, urgency };
  }

  private containsAny(text: string, keywords: string[]): boolean {
    return keywords.some(keyword => text.includes(keyword));
  }

  generateSmartResponse(message: string): string {
    const analysis = this.analyzeContext(message);
    
    // R√©ponse personnalis√©e bas√©e sur l'analyse
    let response = this.getContextualIntro(analysis);
    response += '\n\n' + this.getEmotionalValidation(analysis);
    response += '\n\n' + this.getSpecificAdvice(analysis);
    response += '\n\n' + this.getActionPlan(analysis);
    
    return response;
  }

  private getContextualIntro(analysis: ConflictAnalysis): string {
    const intros = {
      familial: "Les liens familiaux sont pr√©cieux et m√©ritent qu'on investisse du temps pour les pr√©server. Je comprends que les conflits familiaux peuvent √™tre particuli√®rement douloureux car ils touchent au c≈ìur de nos relations les plus importantes.",
      professionnel: "L'environnement professionnel pr√©sente des d√©fis uniques en mati√®re de relations humaines. Il est essentiel de maintenir un √©quilibre entre efficacit√© et harmonie dans l'√©quipe.",
      amoureux: "Les relations amoureuses sont le fondement de notre √©panouissement personnel. Chaque d√©fi dans un couple est une opportunit√© de renforcer votre lien et de mieux vous comprendre mutuellement.",
      amical: "L'amiti√© authentique est un tr√©sor rare. Les conflits entre amis, bien que douloureux, peuvent souvent √™tre r√©solus avec de la patience et de la sinc√©rit√©.",
      voisinage: "La vie en communaut√© n√©cessite des compromis et du respect mutuel. Les conflits de voisinage peuvent souvent √™tre r√©solus par le dialogue et la recherche de solutions cr√©atives.",
      g√©n√©ral: "Chaque situation conflictuelle est unique et m√©rite une approche personnalis√©e. Je vais vous accompagner dans cette d√©marche de r√©solution."
    };
    return intros[analysis.context] || intros.g√©n√©ral;
  }

  private getEmotionalValidation(analysis: ConflictAnalysis): string {
    if (analysis.emotions.length === 0) {
      return "Vos sentiments dans cette situation sont l√©gitimes et m√©ritent d'√™tre entendus.";
    }

    const emotionResponses = {
      col√®re: "Votre col√®re est compr√©hensible et r√©v√®le probablement des besoins non satisfaits. Utilisons cette √©nergie de mani√®re constructive.",
      tristesse: "La tristesse que vous ressentez montre √† quel point cette relation vous tient √† c≈ìur. C'est un signe de votre capacit√© d'empathie.",
      peur: "Il est naturel de ressentir de l'appr√©hension face √† l'incertitude. Identifions ensemble ce qui vous pr√©occupe vraiment.",
      frustration: "Votre frustration indique que vous avez essay√© plusieurs approches. Explorons de nouvelles strat√©gies ensemble.",
      d√©ception: "La d√©ception r√©v√®le que vous aviez des attentes l√©gitimes. Voyons comment les communiquer plus efficacement."
    };

    const validations = analysis.emotions.map(emotion => emotionResponses[emotion]).filter(Boolean);
    return validations.length > 0 ? validations.join(' ') : "Vos √©motions sont valides et importantes dans ce processus.";
  }

  private getSpecificAdvice(analysis: ConflictAnalysis): string {
    const adviceMap = {
      communication: "üó£Ô∏è **Communication**: Proposez un moment calme pour √©changer. Utilisez des 'messages-je' : 'Je ressens... quand... parce que j'ai besoin de...'",
      finances: "üí∞ **Finances**: √âtablissez un budget transparent ensemble. Les questions d'argent touchent souvent √† des valeurs plus profondes comme la s√©curit√© et l'autonomie.",
      temps: "‚è∞ **Temps**: Cr√©ez un planning partag√© qui respecte les besoins de chacun. La qualit√© du temps pass√© ensemble compte plus que la quantit√©.",
      respect: "ü§ù **Respect**: D√©finissez ensemble vos limites et vos attentes. Le respect mutuel est la base de toute relation saine.",
      confiance: "üîí **Confiance**: La reconstruction de la confiance demande du temps et de la coh√©rence. Commencez par de petits engagements tenus."
    };

    const relevantAdvice = analysis.issues.map(issue => adviceMap[issue]).filter(Boolean);
    return relevantAdvice.length > 0 ? relevantAdvice.join('\n\n') : "Concentrez-vous sur l'√©coute active et l'expression de vos besoins de mani√®re non-violente.";
  }

  private getActionPlan(analysis: ConflictAnalysis): string {
    const urgencyPlans = {
      high: "**Plan d'action imm√©diat** :\n1. Prenez une pause si les √©motions sont trop intenses\n2. Contactez un m√©diateur professionnel si n√©cessaire\n3. Organisez une discussion dans les 24h avec des r√®gles claires",
      medium: "**Prochaines √©tapes** :\n1. R√©fl√©chissez √† vos vrais besoins dans cette situation\n2. Choisissez le bon moment pour une conversation calme\n3. Pr√©parez des solutions concr√®tes √† proposer",
      low: "**Approche progressive** :\n1. Observez la situation avec bienveillance\n2. Cherchez des opportunit√©s naturelles de dialogue\n3. Renforcez les aspects positifs de la relation"
    };

    const followUpQuestions = this.generateFollowUpQuestions(analysis);
    
    return urgencyPlans[analysis.urgency] + "\n\nüí° **Rappelez-vous** : Chaque petit pas vers la compr√©hension mutuelle est une victoire." + followUpQuestions;
  }

  private generateFollowUpQuestions(analysis: ConflictAnalysis): string {
    const questions: string[] = [];
    
    // Questions sp√©cifiques au contexte
    const contextQuestions = {
      familial: [
        "Depuis combien de temps cette tension existe-t-elle dans votre famille ?",
        "Y a-t-il eu un √©v√©nement d√©clencheur particulier ?",
        "Quels sont les moments o√π vous vous entendez bien ensemble ?"
      ],
      professionnel: [
        "Cette situation affecte-t-elle votre productivit√© ou celle de l'√©quipe ?",
        "Avez-vous des objectifs professionnels communs que vous pourriez utiliser comme point de d√©part ?",
        "Y a-t-il une hi√©rarchie impliqu√©e dans ce conflit ?"
      ],
      amoureux: [
        "Vous souvenez-vous de ce qui vous a rapproch√©s au d√©but ?",
        "Avez-vous d√©j√† travers√© des difficult√©s similaires ensemble ?",
        "√ätes-vous tous les deux pr√™ts √† faire des efforts pour am√©liorer la situation ?"
      ],
      amical: [
        "Cette amiti√© est-elle importante pour vous deux ?",
        "Y a-t-il eu des malentendus non r√©solus par le pass√© ?",
        "Avez-vous des amis communs qui pourraient vous aider ?"
      ],
      voisinage: [
        "Avez-vous d√©j√† eu de bonnes relations avec ces voisins ?",
        "Le probl√®me est-il r√©current ou ponctuel ?",
        "Y a-t-il des r√®gles de copropri√©t√© ou de quartier √† consid√©rer ?"
      ]
    };

    // Questions bas√©es sur les √©motions d√©tect√©es
    if (analysis.emotions.includes('col√®re')) {
      questions.push("Qu'est-ce qui vous met le plus en col√®re dans cette situation ?");
    }
    if (analysis.emotions.includes('tristesse')) {
      questions.push("Qu'est-ce que vous aimeriez retrouver dans cette relation ?");
    }
    if (analysis.emotions.includes('peur')) {
      questions.push("Quelle est votre plus grande crainte si rien ne change ?");
    }

    // Ajouter des questions contextuelles
    const contextSpecific = contextQuestions[analysis.context] || [];
    questions.push(...contextSpecific.slice(0, 2)); // Limiter √† 2 questions contextuelles

    // Questions g√©n√©rales de r√©flexion
    questions.push("Quel serait pour vous le r√©sultat id√©al de cette situation ?");

    if (questions.length > 0) {
      const selectedQuestions = questions.slice(0, 3); // Max 3 questions
      return "\n\nü§î **Questions pour approfondir** :\n" + 
             selectedQuestions.map((q, i) => `${i + 1}. ${q}`).join('\n');
    }

    return "";
  }
}

const smartAnalyzer = new SmartConflictAnalyzer();

function getDemoResponse(message: string): string {
  // Utilisation du nouveau syst√®me d'analyse intelligent
  return smartAnalyzer.generateSmartResponse(message);
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { message, useDemo } = RequestSchema.parse(body);

    // Mode d√©mo - pas besoin de cl√© API
    if (useDemo) {
      const demoResponse = getDemoResponse(message);
      
      return NextResponse.json({
        response: demoResponse,
        mode: 'demo',
        timestamp: new Date().toISOString()
      });
    }

    // Mode API OpenAI (n√©cessite une cl√© API)
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return NextResponse.json(
        { error: "Cl√© API OpenAI manquante. Utilisez le mode d√©mo." },
        { status: 500 }
      );
    }

    const openai = new OpenAI({ apiKey });

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: COEXIST_RULES
        },
        {
          role: "user",
          content: message
        }
      ],
      temperature: 0.7,
      max_tokens: 1000
    });

    const response = completion.choices[0]?.message?.content || "D√©sol√©, je n'ai pas pu g√©n√©rer une r√©ponse.";

    return NextResponse.json({
      response,
      mode: 'openai',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Erreur API:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Donn√©es invalides", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: "Erreur interne du serveur" },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: "API COEXIST.AI - Endpoint pour conseils de coexistence",
    version: "1.0.0",
    endpoints: {
      POST: "/api/advice - Envoyer un message pour recevoir des conseils"
    },
    demo: true
  });
}
