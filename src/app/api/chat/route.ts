import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { z } from 'zod';
import { recordInteraction, autoImproveResponse } from '@/lib/learning-system';
import { enrichWithSpiritualWisdom, getInspirationalQuote } from '@/lib/spiritual-wisdom';
import { SYSTEM_PROMPT, MEDITATION_PROMPT, EMOTIONAL_INTELLIGENCE_PROMPT, MULTILINGUAL_RESPONSES } from '@/lib/prompts';
import { callGemini, callOpenRouter, callClaude, callOpenAI } from '@/lib/ai-services';
import { cacheResponse, getCachedResponse, generateCacheKey, measureResponseTime } from '@/lib/performance';

// Sch√©ma de validation pour la requ√™te de chat
const ChatRequestSchema = z.object({
  message: z.string().min(1, "Le message ne peut pas √™tre vide"),
  history: z.array(z.object({
    role: z.enum(['user', 'assistant']),
    content: z.string()
  })).optional().default([]),
  userId: z.string().optional(),
  language: z.string().optional().default('fr')
});

// Fonction pour effectuer une recherche web
async function performWebSearch(query: string, maxResults: number = 4) {
  try {
    const searchResponse = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/search`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ query, maxResults }),
    });

    if (searchResponse.ok) {
      const searchData = await searchResponse.json();
      return searchData.results || [];
    }
    return [];
  } catch (error) {
    console.error('Web search error:', error);
    return [];
  }
}

// Fonction pour d√©terminer si une recherche web est n√©cessaire
function needsWebSearch(message: string): boolean {
  const searchKeywords = [
    'actualit√©s', 'nouveau', 'r√©cent', 'dernier', 'aujourd\'hui', 'maintenant',
    'prix', 'co√ªt', 'tarif', 'loi', 'r√©glementation', 'statut', 'statut',
    'personne', 'entreprise', 'soci√©t√©', 'voyage', 'horaire', 'planning',
    '√©v√©nement', 'manifestation', 'crise', 'urgence', 'breaking'
  ];
  
  const lowerMessage = message.toLowerCase();
  return searchKeywords.some(keyword => lowerMessage.includes(keyword));
}

// Base de connaissances RAG pour COEXIST.AI
const KNOWLEDGE_BASE = {
  principles: [
    "Respect mutuel entre toutes les cultures et religions",
    "Non-violence comme principe fondamental",
    "Dialogue et compr√©hension mutuelle",
    "Protection de l'environnement et de la vie",
    "Dignit√© humaine universelle"
  ],
  techniques: [
    "Communication Non-Violente (CNV) - Marshall Rosenberg",
    "M√©diation par cercles de paix - Tradition am√©rindienne",
    "Philosophie Ubuntu - 'Je suis parce que nous sommes'",
    "Pleine conscience dans la r√©solution de conflits",
    "Justice r√©paratrice au lieu de punition"
  ],
  quotes: [
    "La paix ne peut √™tre maintenue par la force. Elle ne peut l'√™tre que par la compr√©hension. - Albert Einstein",
    "Il n'y a pas de chemin vers la paix. La paix est le chemin. - Mahatma Gandhi",
    "La paix commence par un sourire. - M√®re Teresa",
    "Si tu veux faire la paix avec ton ennemi, tu dois travailler avec ton ennemi. - Nelson Mandela",
    "La haine ne cesse jamais par la haine ; la haine cesse par l'amour. - Bouddha"
  ],
  religions: {
    christianity: "Le christianisme pr√¥ne l'amour universel et le pardon. J√©sus a enseign√© : 'Heureux les artisans de paix' (Matthieu 5:9).",
    islam: "L'Islam enseigne la paix (Salam) et la tol√©rance. Le Coran dit : 'Allah ne vous d√©fend pas d'√™tre bienfaisants et √©quitables' (60:8).",
    judaism: "Le juda√Øsme enseigne 'Tu aimeras ton prochain comme toi-m√™me' (L√©vitique 19:18) et Tikkun Olam (r√©parer le monde).",
    buddhism: "Le bouddhisme pr√¥ne la compassion universelle (Karuna) et la non-violence (Ahimsa).",
    hinduism: "L'hindouisme enseigne Vasudhaiva Kutumbakam (le monde est une famille) et l'unit√© dans la diversit√©."
  }
};

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { message, history, userId, language } = ChatRequestSchema.parse(body);

    // V√©rifier les cl√©s API disponibles
    const geminiKey = process.env.GOOGLE_API_KEY;
    const openRouterKey = process.env.OPENROUTER_API_KEY;
    const openAIKey = process.env.OPENAI_API_KEY;
    const claudeKey = process.env.ANTHROPIC_API_KEY;
    
    // V√©rifier si nous avons au moins une cl√© API
    if (!geminiKey && !openRouterKey && !openAIKey && !claudeKey) {
      return NextResponse.json({
        response: `Je suis d√©sol√©, mais les services d'intelligence artificielle ne sont pas configur√©s actuellement. 

Pour activer les r√©ponses intelligentes, veuillez configurer une cl√© API OpenAI, OpenRouter ou Anthropic dans les variables d'environnement.

En attendant, je peux vous aider avec mes connaissances int√©gr√©es sur la paix, la coexistence et la sagesse universelle. Comment puis-je vous accompagner aujourd'hui ?`,
        mode: 'fallback',
        timestamp: new Date().toISOString(),
        personalized: false,
        language: 'fr',
        error: 'No API keys configured'
      }, { status: 503 });
    }

    // V√©rifier si une recherche web est n√©cessaire
    let webSearchResults: any[] = [];
    if (needsWebSearch(message)) {
      webSearchResults = await performWebSearch(message, 4);
    }

    // V√©rifier le cache avant de traiter la requ√™te
    const cacheKey = generateCacheKey(message, language);
    const cachedResponse = getCachedResponse(cacheKey);
    
    if (cachedResponse) {
      return NextResponse.json({
        response: cachedResponse,
        mode: 'cached',
        timestamp: new Date().toISOString(),
        personalized: true,
        language,
        userId,
        cached: true
      });
    }

    // Construire le contexte enrichi avec la base de connaissances
    let contextualPrompt = buildContextualPrompt(message, language);
    
    // Ajouter les r√©sultats de recherche web si disponibles
    if (webSearchResults.length > 0) {
      contextualPrompt += `\n\nRECHERCHE WEB DISPONIBLE:\n${webSearchResults.map((result, index) => 
        `${index + 1}. ${result.title}\n   ${result.snippet}\n   Source: ${result.url}`
      ).join('\n\n')}\n\nInt√®gre ces informations r√©centes dans ta r√©ponse et cite les sources appropri√©es.`;
    }
    
    // Construire l'historique des messages
    const messages = [
      {
        role: 'system' as const,
        content: contextualPrompt
      },
      ...history.slice(-10), // Garder seulement les 10 derniers messages
      {
        role: 'user' as const,
        content: message
      }
    ];

    // Strat√©gie de fallback am√©lior√©e avec les meilleurs mod√®les
    let response = '';
    let mode = 'fallback';
    
    // 1. Essayer Gemini Pro en premier (GRATUIT - 60 req/min)
    if (!response && geminiKey) {
      try {
        console.log('Tentative avec Gemini Pro (gratuit)...');
        response = await callGemini(messages, geminiKey);
        mode = 'gemini-pro';
      } catch (e) {
        console.error('Gemini failed:', e);
      }
    }

    // 2. Essayer Claude 3.5 Sonnet directement (le plus performant)
    if (!response && claudeKey) {
      try {
        console.log('Tentative avec Claude 3.5 Sonnet...');
        response = await callClaude(messages, claudeKey);
        mode = 'claude-3.5-sonnet';
      } catch (e) {
        console.error('Claude failed:', e);
      }
    }

    // 3. Essayer OpenRouter avec les meilleurs mod√®les
    if (!response && openRouterKey) {
      try {
        console.log('Tentative avec OpenRouter...');
        response = await callOpenRouter(messages, openRouterKey);
        mode = 'openrouter-premium';
      } catch (e) {
        console.error('OpenRouter failed:', e);
      }
    }

    // 4. Fallback OpenAI GPT-4o
    if (!response && openAIKey) {
      try {
        console.log('Tentative avec OpenAI GPT-4o...');
        response = await callOpenAI(messages, openAIKey);
        mode = 'openai-gpt-4o';
      } catch (e) {
        console.error('OpenAI failed:', e);
      }
    }

    // 5. Si tout a √©chou√©, retourner une erreur
    if (!response) {
      console.log('Toutes les APIs ont √©chou√©...');
      return NextResponse.json({
        response: `Je rencontre actuellement des difficult√©s techniques avec les services d'intelligence artificielle. 

Veuillez r√©essayer dans quelques instants. Si le probl√®me persiste, v√©rifiez que les cl√©s API sont correctement configur√©es.

Je reste √† votre disposition pour vous aider d√®s que les services seront r√©tablis.`,
        mode: 'error',
        timestamp: new Date().toISOString(),
        personalized: false,
        language: 'fr',
        error: 'All API services failed'
      }, { status: 503 });
    }
    
    // Enrichir la r√©ponse avec la sagesse spirituelle
    let enrichedResponse = response;
    
    // D√©tecter le contexte et les √©motions pour enrichir la r√©ponse
    const context = detectContext(message);
    const emotions = detectEmotions(message);
    
    // Enrichir avec la sagesse spirituelle appropri√©e
    enrichedResponse = enrichWithSpiritualWisdom(
      response,
      message,
      context,
      emotions[0] || 'neutre',
      language,
      'tous'
    );
    
    // Ajouter une citation inspirante si appropri√©
    if (shouldAddInspirationalQuote(message)) {
      const quote = getInspirationalQuote(language);
      enrichedResponse += `\n\nüí´ **Citation inspirante** :\n"${quote}"`;
    }
    
    // Ajouter des suggestions de m√©ditation si appropri√©
    if (needsMeditationSuggestion(message)) {
      enrichedResponse += `\n\nüßò‚Äç‚ôÄÔ∏è **Suggestion de bien-√™tre** :\nVoulez-vous que je vous guide dans une m√©ditation pour cultiver la paix int√©rieure ?`;
    }

    // Mettre en cache la r√©ponse
    cacheResponse(cacheKey, enrichedResponse);

    // Ajouter des m√©tadonn√©es enrichies
    const enhancedResponse = {
      response: enrichedResponse,
      mode,
      timestamp: new Date().toISOString(),
      personalized: true,
      language,
      userId,
      knowledgeSources: extractKnowledgeSources(message),
      followUpSuggestions: generateFollowUpSuggestions(message, language),
      spiritualWisdom: context,
      emotions: emotions,
      meditationSuggested: needsMeditationSuggestion(message),
      cached: false
    };

    return NextResponse.json(enhancedResponse);

  } catch (error) {
    console.error('Erreur dans l\'API Chat:', error);
    
    // R√©ponse de fallback en cas d'erreur
    const fallbackResponse = {
      response: `Bonjour ! Je suis COEXIST.AI, votre assistant de sagesse universelle. 

Je rencontre actuellement une difficult√© technique, mais je suis toujours l√† pour vous accompagner vers la paix et la coexistence.

Comment puis-je vous aider aujourd'hui ?`,
      mode: 'fallback',
      timestamp: new Date().toISOString(),
      personalized: false,
      language: 'fr',
      error: 'Service temporairement indisponible'
    };

    return NextResponse.json(fallbackResponse, { status: 500 });
  }
}

function buildContextualPrompt(message: string, language: string): string {
  const lowerMessage = message.toLowerCase();
  
  let contextualInfo = '';
  let specializedPrompt = '';
  
  // Ajouter des informations contextuelles selon le message
  if (lowerMessage.includes('conflit') || lowerMessage.includes('dispute')) {
    contextualInfo += '\n\nContexte: L\'utilisateur demande de l\'aide pour un conflit. Utilisez les techniques de r√©solution de conflits de la base de connaissances.';
  }
  
  if (lowerMessage.includes('religion') || lowerMessage.includes('foi')) {
    contextualInfo += '\n\nContexte: Question religieuse d√©tect√©e. Pr√©sentez les perspectives de paix de toutes les traditions religieuses.';
  }
  
  if (lowerMessage.includes('culture') || lowerMessage.includes('diff√©rence')) {
    contextualInfo += '\n\nContexte: Question culturelle d√©tect√©e. Promouvez la compr√©hension interculturelle et l\'appr√©ciation des diff√©rences.';
  }

  // D√©tecter les besoins de m√©ditation
  if (lowerMessage.includes('m√©ditation') || lowerMessage.includes('stress') || lowerMessage.includes('anxi√©t√©') || lowerMessage.includes('relaxation')) {
    specializedPrompt += '\n\n' + MEDITATION_PROMPT;
  }

  // D√©tecter les besoins d'intelligence √©motionnelle
  if (lowerMessage.includes('√©motion') || lowerMessage.includes('col√®re') || lowerMessage.includes('tristesse') || lowerMessage.includes('peur')) {
    specializedPrompt += '\n\n' + EMOTIONAL_INTELLIGENCE_PROMPT;
  }

  // Ajouter la langue de r√©ponse
  const languageInstruction = language === 'fr' 
    ? 'R√©pondez en fran√ßais.' 
    : language === 'en' 
    ? 'Respond in English.'
    : language === 'es'
    ? 'Responde en espa√±ol.'
    : 'Detect and respond in the user\'s language.';

  return `${SYSTEM_PROMPT}

${contextualInfo}

${specializedPrompt}

Instructions de langue: ${languageInstruction}

Base de connaissances disponible:
- Principes: ${KNOWLEDGE_BASE.principles.join(', ')}
- Techniques: ${KNOWLEDGE_BASE.techniques.join(', ')}
- Citations: ${KNOWLEDGE_BASE.quotes.join(' | ')}

Utilisez ces informations pour enrichir vos r√©ponses tout en restant naturel, chaleureux et inspirant.`;
}

function extractKnowledgeSources(message: string): string[] {
  const lowerMessage = message.toLowerCase();
  const sources = [];
  
  if (lowerMessage.includes('conflit') || lowerMessage.includes('dispute')) {
    sources.push('Techniques de r√©solution de conflits');
  }
  
  if (lowerMessage.includes('religion') || lowerMessage.includes('foi')) {
    sources.push('Sagesse religieuse universelle');
  }
  
  if (lowerMessage.includes('culture')) {
    sources.push('Traditions culturelles de paix');
  }
  
  if (lowerMessage.includes('communication')) {
    sources.push('Communication Non-Violente');
  }
  
  return sources;
}

function detectContext(message: string): string {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('conflit') || lowerMessage.includes('dispute')) return 'conflit';
  if (lowerMessage.includes('religion') || lowerMessage.includes('foi')) return 'religion';
  if (lowerMessage.includes('culture') || lowerMessage.includes('diff√©rence')) return 'culture';
  if (lowerMessage.includes('m√©ditation') || lowerMessage.includes('stress')) return 'bien-√™tre';
  if (lowerMessage.includes('√©motion') || lowerMessage.includes('col√®re')) return '√©motion';
  
  return 'g√©n√©ral';
}

function detectEmotions(message: string): string[] {
  const lowerMessage = message.toLowerCase();
  const emotions = [];
  
  if (lowerMessage.includes('col√®re') || lowerMessage.includes('frustr√©')) emotions.push('col√®re');
  if (lowerMessage.includes('tristesse') || lowerMessage.includes('triste')) emotions.push('tristesse');
  if (lowerMessage.includes('peur') || lowerMessage.includes('anxi√©t√©')) emotions.push('peur');
  if (lowerMessage.includes('joie') || lowerMessage.includes('heureux')) emotions.push('joie');
  if (lowerMessage.includes('gratitude') || lowerMessage.includes('reconnaissant')) emotions.push('gratitude');
  
  return emotions.length > 0 ? emotions : ['neutre'];
}

function shouldAddInspirationalQuote(message: string): boolean {
  const lowerMessage = message.toLowerCase();
  const quoteTriggers = ['inspiration', 'motivation', 'espoir', 'difficile', 'd√©courag√©', 'perdu'];
  return quoteTriggers.some(trigger => lowerMessage.includes(trigger));
}

function needsMeditationSuggestion(message: string): boolean {
  const lowerMessage = message.toLowerCase();
  const meditationTriggers = ['stress', 'anxi√©t√©', 'tension', 'relaxation', 'calme', 'paix int√©rieure'];
  return meditationTriggers.some(trigger => lowerMessage.includes(trigger));
}

function generateFollowUpSuggestions(message: string, language: string): string[] {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('conflit') || lowerMessage.includes('dispute')) {
    return [
      language === 'fr' ? 'Comment organiser une m√©diation ?' : 'How to organize mediation?',
      language === 'fr' ? 'Techniques de communication non-violente' : 'Non-violent communication techniques',
      language === 'fr' ? 'G√©rer les √©motions dans un conflit' : 'Managing emotions in conflict'
    ];
  }
  
  if (lowerMessage.includes('religion') || lowerMessage.includes('foi')) {
    return [
      language === 'fr' ? 'Valeurs communes entre religions' : 'Common values between religions',
      language === 'fr' ? 'Promouvoir le dialogue interreligieux' : 'Promote interreligious dialogue',
      language === 'fr' ? 'Comprendre les diff√©rences religieuses' : 'Understand religious differences'
    ];
  }
  
  if (lowerMessage.includes('m√©ditation') || lowerMessage.includes('stress')) {
    return [
      language === 'fr' ? 'Techniques de respiration' : 'Breathing techniques',
      language === 'fr' ? 'M√©ditation de l\'amour-bienveillant' : 'Loving-kindness meditation',
      language === 'fr' ? 'Gestion du stress au quotidien' : 'Daily stress management'
    ];
  }
  
  return [
    language === 'fr' ? 'Comment puis-je am√©liorer ma communication ?' : 'How can I improve my communication?',
    language === 'fr' ? 'Techniques de r√©solution de conflits' : 'Conflict resolution techniques',
    language === 'fr' ? 'D√©velopper l\'empathie au quotidien' : 'Develop empathy in daily life'
  ];
}

// Note: Les fonctions callGemini, callOpenRouter, callClaude et callOpenAI 
// sont maintenant dans le fichier ai-services.ts
