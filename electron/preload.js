const { contextBridge, ipcRenderer } = require('electron');

// Exposer les APIs sÃ©curisÃ©es au processus de rendu
contextBridge.exposeInMainWorld('electronAPI', {
  // Informations sur l'application
  getAppVersion: () => ipcRenderer.invoke('get-app-version'),
  
  // BoÃ®tes de dialogue
  showMessageBox: (options) => ipcRenderer.invoke('show-message-box', options),
  
  // VÃ©rification des mises Ã  jour
  checkForUpdates: () => ipcRenderer.invoke('check-for-updates'),
  
  // Notifications systÃ¨me
  showNotification: (options) => ipcRenderer.invoke('show-notification', options),
  
  // Ã‰vÃ©nements de l'application
  onAppReady: (callback) => {
    ipcRenderer.on('app-ready', callback);
  },
  
  onAppUpdate: (callback) => {
    ipcRenderer.on('app-update', callback);
  },
  
  // Utilitaires
  platform: process.platform,
  isElectron: true,
  
  // Gestion des fenÃªtres
  minimizeWindow: () => ipcRenderer.send('minimize-window'),
  maximizeWindow: () => ipcRenderer.send('maximize-window'),
  closeWindow: () => ipcRenderer.send('close-window'),
  
  // Gestion des raccourcis clavier
  registerShortcut: (shortcut, callback) => {
    ipcRenderer.on(`shortcut-${shortcut}`, callback);
  },
  
  unregisterShortcut: (shortcut) => {
    ipcRenderer.removeAllListeners(`shortcut-${shortcut}`);
  }
});

// Gestion des erreurs
window.addEventListener('error', (event) => {
  console.error('Erreur dans le processus de rendu:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
  console.error('Promesse rejetÃ©e non gÃ©rÃ©e:', event.reason);
});

console.log('ğŸ”§ Preload script chargÃ© avec succÃ¨s');
